'use client'

import { useState, useCallback, useEffect, useRef } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Dialog, DialogContent, DialogTitle, DialogHeader } from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import ProfessionalFarmEditor from './professional-farm-editor'
import { 
  X, 
  MapPin,
  Square,
  Grid3x3,
  Save,
  Info,
  Eye,
  Settings,
  Download,
  Upload,
  Loader2,
  Calendar,
  Sprout,
  Edit,
  Activity,
  ExternalLink,
  BarChart3,
  Target,
  Check,
  X as XIcon,
  Palette,
  AlertTriangle
} from 'lucide-react'
import { useRouter } from 'next/navigation'
import type { MeshCell } from '@/types/database'

interface FarmMapViewProps {
  onClose: () => void
}

interface PlotPolygon {
  id: string
  name: string
  description?: string
  coordinates: number[][]
  area: number
  perimeter: number
  isValid: boolean
  isVisible: boolean
  color: string
  createdAt: Date
}

export default function FarmMapView({ onClose }: FarmMapViewProps) {
  const [selectedCells, setSelectedCells] = useState<MeshCell[]>([])
  const [currentPlot, setCurrentPlot] = useState<PlotPolygon | null>(null)
  const [showStats, setShowStats] = useState(true)
  const [savedAreas, setSavedAreas] = useState<any[]>([])
  const [registeredVegetables, setRegisteredVegetables] = useState<any[]>([])
  const [isLoadingVegetables, setIsLoadingVegetables] = useState(false)
  const [selectedVegetable, setSelectedVegetable] = useState<any>(null)
  const [showDetailModal, setShowDetailModal] = useState(false)
  const [isEditing, setIsEditing] = useState(false)
  const [editForm, setEditForm] = useState<any>({})
  const [selectedColor, setSelectedColor] = useState('#22c55e')
  const [isSaving, setIsSaving] = useState(false)
  const router = useRouter()
  
  const mapEditorRef = useRef<{ flyToLocation: (lng: number, lat: number, zoom?: number) => void; fitBounds: (bounds: [[number, number], [number, number]]) => void }>(null)

  // Ê†ΩÂüπÈáéËèú„Éá„Éº„ÇøÂèñÂæóÔºàÊúÄÂàù„Å´ÂÆöÁæ©Ôºâ
  const loadRegisteredVegetables = useCallback(async () => {
    setIsLoadingVegetables(true)
    try {
      const response = await fetch('/api/vegetables?company_id=a1111111-1111-1111-1111-111111111111')
      if (response.ok) {
        const result = await response.json()
        if (result.success) {
          // ÈáéËèú„Éá„Éº„Çø„Å´Ëæ≤Âú∞„Ç®„É™„Ç¢ÊÉÖÂ†±„ÇíÂ±ïÈñã
          const processedVegetables = (result.data || [])
            .filter((vegetable: any) => vegetable.id) // ÊúâÂäπ„Å™ID„ÇíÊåÅ„Å§„É¨„Ç≥„Éº„Éâ„ÅÆ„Åø
            .map((vegetable: any) => ({
              ...vegetable,
              farm_area_data: vegetable.custom_fields?.farm_area_data || null,
              has_spatial_data: vegetable.custom_fields?.has_spatial_data || false,
              polygon_color: vegetable.custom_fields?.polygon_color || '#22c55e'
            }))
          
          console.log('ü•ï Âá¶ÁêÜÊ∏à„ÅøÈáéËèú„Éá„Éº„Çø:', processedVegetables)
          setRegisteredVegetables(processedVegetables)
          
          // „Éá„Éº„Çø„Éô„Éº„Çπ„Å´Â≠òÂú®„Åó„Å™„ÅÑÂè§„ÅÑID„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆË≠¶Âëä
          if (processedVegetables.length === 0 && result.data?.length > 0) {
            console.warn('‚ö†Ô∏è ÈáéËèú„Éá„Éº„Çø„ÅØÂèñÂæó„Åß„Åç„Åæ„Åó„Åü„Åå„ÄÅÊúâÂäπ„Å™„É¨„Ç≥„Éº„Éâ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì')
          }
        } else {
          console.warn('‚ö†Ô∏è ÈáéËèú„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó:', result.error)
          setRegisteredVegetables([])
        }
      } else {
        console.error('‚ùå ÈáéËèú„Éá„Éº„ÇøAPI„É™„ÇØ„Ç®„Çπ„Éà„ÅåÂ§±Êïó:', response.status)
        setRegisteredVegetables([])
      }
    } catch (error) {
      console.error('Ê†ΩÂüπÈáéËèú„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó:', error)
      setRegisteredVegetables([])
    } finally {
      setIsLoadingVegetables(false)
    }
  }, [])

  // „Çª„É´ÈÅ∏Êäû„Éè„É≥„Éâ„É©„Éº
  const handleCellsSelected = useCallback((cells: MeshCell[]) => {
    setSelectedCells(cells)
  }, [])

  // Ëæ≤Âú∞„Ç®„É™„Ç¢‰øùÂ≠òÂÆå‰∫Ü„Éè„É≥„Éâ„É©„Éº
  const handleAreaSaved = useCallback((areaData: any) => {
    console.log('Ëæ≤Âú∞„Ç®„É™„Ç¢‰øùÂ≠òÂÆå‰∫Ü:', areaData)
    setSavedAreas(prev => [...prev, areaData])
    
    // ÈáéËèú„Éá„Éº„Çø„ÇíÂÜçË™≠„ÅøËæº„ÅøÔºàÈáéËèúÁôªÈå≤„ÅåÂÆå‰∫Ü„Åó„ÅüÂ†¥ÂêàÔºâ
    loadRegisteredVegetables()
    
    // Ëæ≤Âú∞ÊÉÖÂ†±„ÇíË°®Á§∫Áî®„Å´Êõ¥Êñ∞
    if (areaData.geometry) {
      const mockPlot: PlotPolygon = {
        id: areaData.id || 'new-plot',
        name: areaData.name,
        description: areaData.description,
        coordinates: areaData.geometry.geometry.coordinates[0],
        area: areaData.area_square_meters,
        perimeter: 0, // Ë®àÁÆó„ÅåÂøÖË¶Å
        isValid: true,
        isVisible: true,
        color: '#22c55e',
        createdAt: new Date()
      }
      setCurrentPlot(mockPlot)
    }
  }, [loadRegisteredVegetables])

  // „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Éû„Ç¶„É≥„ÉàÊôÇ„Å´ÈáéËèú„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
  useEffect(() => {
    loadRegisteredVegetables()
  }, [loadRegisteredVegetables])

  // ÈáéËèúÁôªÈå≤„Ç§„Éô„É≥„Éà„ÇíÁõ£Ë¶ñ„Åó„Å¶Ëá™ÂãïÊõ¥Êñ∞
  useEffect(() => {
    const handleVegetableRegistered = (event: CustomEvent) => {
      console.log('üîî ÈáéËèúÁôªÈå≤„Ç§„Éô„É≥„ÉàÂèó‰ø°:', event.detail)
      // ÈáéËèú„É™„Çπ„Éà„ÇíÂÜçË™≠„ÅøËæº„Åø
      loadRegisteredVegetables()
    }

    window.addEventListener('vegetableRegistered', handleVegetableRegistered as EventListener)
    
    return () => {
      window.removeEventListener('vegetableRegistered', handleVegetableRegistered as EventListener)
    }
  }, [loadRegisteredVegetables])

  // ÈáéËèú„Ç®„É™„Ç¢„Å∏„ÅÆÁßªÂãï
  const handleCreateVegetable = useCallback(() => {
    // ÈÅ∏Êäû„Åï„Çå„Åü„Çª„É´„Çí‰Ωø„Å£„ÅüÈáéËèúÁôªÈå≤„ÅÆÂá¶ÁêÜ
    console.log('ÈáéËèúÁôªÈå≤ÁîªÈù¢„Å∏ÁßªÂãï:', selectedCells)
  }, [selectedCells])

  const handleVegetableAreaClick = useCallback((vegetable: any) => {
    console.log('ü•ï ÈáéËèú„Ç®„É™„Ç¢„Çí„ÇØ„É™„ÉÉ„ÇØ:', vegetable)
    
    if (vegetable.farm_area_data?.geometry && mapEditorRef.current) {
      // Êó¢Â≠ò„ÅÆ„Éù„É™„Ç¥„É≥„ÇíÂâäÈô§„Åó„Å¶„Åã„ÇâÊñ∞„Åó„ÅÑ„Éù„É™„Ç¥„É≥„ÇíË°®Á§∫
      if ((mapEditorRef.current as any).clearVegetablePolygons) {
        (mapEditorRef.current as any).clearVegetablePolygons()
      }
      
      // ÈáéËèú„Ç®„É™„Ç¢„ÅÆ„Éù„É™„Ç¥„É≥„ÇíÂú∞Âõ≥‰∏ä„Å´Ë°®Á§∫
      if ((mapEditorRef.current as any).showVegetablePolygon) {
        (mapEditorRef.current as any).showVegetablePolygon(vegetable)
        console.log('üü¢ Á∑ëËâ≤„ÅÆ„Éù„É™„Ç¥„É≥„ÇíË°®Á§∫„Åó„Åæ„Åó„Åü')
      } else {
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÂæìÊù•„ÅÆ‰∏≠ÂøÉÁÇπÁßªÂãï
        const geometry = vegetable.farm_area_data.geometry
        if (geometry.geometry && geometry.geometry.coordinates) {
          const coordinates = geometry.geometry.coordinates[0]
          let centerLng = 0
          let centerLat = 0
          
          coordinates.forEach((coord: [number, number]) => {
            centerLng += coord[0]
            centerLat += coord[1]
          })
          
          centerLng /= coordinates.length
          centerLat /= coordinates.length
          
          mapEditorRef.current.flyToLocation(centerLng, centerLat, 18)
        }
      }
    } else {
      console.warn('‚ö†Ô∏è ÈáéËèú„ÅÆ‰ΩçÁΩÆÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çâ„Åæ„Åõ„Çì:', vegetable)
      alert('„Åì„ÅÆÈáéËèú„ÅÆ‰ΩçÁΩÆÊÉÖÂ†±„ÅåÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åü„ÇÅ„ÄÅÂú∞Âõ≥„Å´ÁßªÂãï„Åß„Åç„Åæ„Åõ„Çì„ÄÇ')
    }
  }, [])

  // ÈáéËèúË©≥Á¥∞Á¢∫Ë™ç„Éè„É≥„Éâ„É©„Éº
  const handleVegetableDetailClick = useCallback(async (vegetable: any) => {
    console.log('üìã ÈáéËèúË©≥Á¥∞Á¢∫Ë™ç„Çí„ÇØ„É™„ÉÉ„ÇØ:', vegetable)
    
    // „Éá„Éº„Çø„Éô„Éº„Çπ„Åß„É¨„Ç≥„Éº„Éâ„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    try {
      const response = await fetch(`/api/vegetables/${vegetable.id}`)
      const result = await response.json()
      
      if (!response.ok || !result.success) {
        alert(`‚ùå „Åì„ÅÆÈáéËèú„É¨„Ç≥„Éº„ÉâÔºàID: ${vegetable.id}Ôºâ„ÅØ„Éá„Éº„Çø„Éô„Éº„Çπ„Å´Â≠òÂú®„Åó„Åæ„Åõ„Çì„ÄÇ\\n\\nÈáéËèú‰∏ÄË¶ß„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô„ÄÇ`)
        // ÈáéËèú„É™„Çπ„Éà„ÇíÂÜçË™≠„ÅøËæº„Åø
        loadRegisteredVegetables()
        return
      }
      
      // ÊúÄÊñ∞„Éá„Éº„Çø„Åß„Çπ„ÉÜ„Éº„Éà„ÇíÊõ¥Êñ∞
      setSelectedVegetable(result.data)
      setShowDetailModal(true)
      
    } catch (error) {
      console.error('ÈáéËèú„É¨„Ç≥„Éº„ÉâÁ¢∫Ë™ç„Ç®„É©„Éº:', error)
      alert('ÈáéËèú„É¨„Ç≥„Éº„Éâ„ÅÆÁ¢∫Ë™ç„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
    }
  }, [loadRegisteredVegetables])

  // Ë©≥Á¥∞„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
  const handleCloseDetailModal = useCallback(() => {
    setShowDetailModal(false)
    setSelectedVegetable(null)
    setIsEditing(false)
    setEditForm({})
  }, [])

  // Á∑®ÈõÜ„É¢„Éº„ÉâÈñãÂßã
  const handleStartEdit = useCallback((vegetable: any) => {
    setIsEditing(true)
    setEditForm({
      name: vegetable.name,
      variety_name: vegetable.variety_name,
      plot_name: vegetable.plot_name,
      planting_date: vegetable.planting_date,
      expected_harvest_start: vegetable.expected_harvest_start,
      expected_harvest_end: vegetable.expected_harvest_end,
      status: vegetable.status,
      notes: vegetable.notes || ''
    })
    setSelectedColor(vegetable.polygon_color || '#22c55e')
  }, [])

  // Á∑®ÈõÜ„Ç≠„É£„É≥„Çª„É´
  const handleCancelEdit = useCallback(() => {
    setIsEditing(false)
    setEditForm({})
  }, [])

  // „Éï„Ç©„Éº„É†Êõ¥Êñ∞
  const handleFormChange = useCallback((field: string, value: any) => {
    setEditForm((prev: any) => ({ ...prev, [field]: value }))
  }, [])

  // „Éï„Ç©„Éº„É†„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
  const validateForm = useCallback(() => {
    const errors: string[] = []
    
    // ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ„ÉÅ„Çß„ÉÉ„ÇØ
    if (!editForm.name?.trim()) {
      errors.push('ÈáéËèúÂêç„ÅØÂøÖÈ†à„Åß„Åô„ÄÇ')
    }
    if (!editForm.variety_name?.trim()) {
      errors.push('ÂìÅÁ®ÆÂêç„ÅØÂøÖÈ†à„Åß„Åô„ÄÇ')
    }
    if (!editForm.plot_name?.trim()) {
      errors.push('Âå∫ÁîªÂêç„ÅØÂøÖÈ†à„Åß„Åô„ÄÇ')
    }
    if (!editForm.planting_date) {
      errors.push('Ê§ç‰ªòÊó•„ÅØÂøÖÈ†à„Åß„Åô„ÄÇ')
    }
    
    // Êó•‰ªò„ÅÆÂ¶•ÂΩìÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
    if (editForm.planting_date) {
      const plantingDate = new Date(editForm.planting_date)
      if (isNaN(plantingDate.getTime())) {
        errors.push('Ê§ç‰ªòÊó•„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ')
      }
    }
    
    if (editForm.expected_harvest_start && editForm.planting_date) {
      const plantingDate = new Date(editForm.planting_date)
      const harvestStart = new Date(editForm.expected_harvest_start)
      
      if (!isNaN(harvestStart.getTime()) && harvestStart < plantingDate) {
        errors.push('ÂèéÁ©´ÈñãÂßã‰∫àÂÆöÊó•„ÅØÊ§ç‰ªòÊó•„Çà„ÇäÂæå„ÅÆÊó•‰ªò„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
      }
    }
    
    if (editForm.expected_harvest_end && editForm.expected_harvest_start) {
      const harvestStart = new Date(editForm.expected_harvest_start)
      const harvestEnd = new Date(editForm.expected_harvest_end)
      
      if (!isNaN(harvestStart.getTime()) && !isNaN(harvestEnd.getTime()) && harvestEnd < harvestStart) {
        errors.push('ÂèéÁ©´ÁµÇ‰∫Ü‰∫àÂÆöÊó•„ÅØÂèéÁ©´ÈñãÂßã‰∫àÂÆöÊó•„Çà„ÇäÂæå„ÅÆÊó•‰ªò„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
      }
    }
    
    return errors
  }, [editForm])

  // Â§âÊõ¥‰øùÂ≠ò
  const handleSaveChanges = useCallback(async () => {
    if (!selectedVegetable) return
    
    // „Éï„Ç©„Éº„É†„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    const validationErrors = validateForm()
    if (validationErrors.length > 0) {
      alert('‚ùå ÂÖ•ÂäõÂÜÖÂÆπ„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô:\\n\\n' + validationErrors.join('\\n'))
      return
    }
    
    setIsSaving(true)
    try {
      const updateData = {
        ...editForm,
        polygon_color: selectedColor,
        farm_area_data: selectedVegetable.farm_area_data ? {
          ...selectedVegetable.farm_area_data,
          color: selectedColor
        } : null
      }

      const response = await fetch(`/api/vegetables/${selectedVegetable.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData)
      })

      if (response.ok) {
        const updatedVegetable = { ...selectedVegetable, ...editForm, polygon_color: selectedColor }
        setSelectedVegetable(updatedVegetable)
        setIsEditing(false)
        
        // „Éù„É™„Ç¥„É≥„ÅÆËâ≤„ÇíÊõ¥Êñ∞
        if ((mapEditorRef.current as any).updatePolygonColor) {
          (mapEditorRef.current as any).updatePolygonColor(selectedVegetable.id, selectedColor)
        }
        
        // ÈáéËèú‰∏ÄË¶ß„ÇíÂÜçË™≠„ÅøËæº„Åø
        loadRegisteredVegetables()
        
        alert('Â§âÊõ¥„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü„ÄÇ')
      } else {
        throw new Error('‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
      }
    } catch (error) {
      console.error('‰øùÂ≠ò„Ç®„É©„Éº:', error)
      alert('‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ')
    } finally {
      setIsSaving(false)
    }
  }, [selectedVegetable, editForm, selectedColor, loadRegisteredVegetables, validateForm])

  // Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÈñ¢Êï∞
  const formatDate = (dateString: string) => {
    if (!dateString) return 'Êú™Ë®≠ÂÆö'
    return new Date(dateString).toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  return (
    <div className="h-screen flex flex-col bg-gray-50">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Ëæ≤Âú∞Á∑®ÈõÜ„Éª„É°„ÉÉ„Ç∑„É•ÁÆ°ÁêÜ</h1>
            <p className="text-gray-600 mt-1">
              Ëæ≤Âú∞„ÅÆÂ¢ÉÁïå„ÇíË®≠ÂÆö„Åó„ÄÅ5m„É°„ÉÉ„Ç∑„É•„ÅßÊ†ΩÂüπÂå∫Áîª„ÇíÁÆ°ÁêÜ
            </p>
          </div>
          
          <div className="flex items-center gap-4">
            {/* „Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫ */}
            {showStats && (
              <div className="flex items-center space-x-4 text-sm">
                {currentPlot && (
                  <Badge variant="outline" className="bg-green-50 text-green-700">
                    Ëæ≤Âú∞Ë®≠ÂÆöÊ∏à„Åø
                  </Badge>
                )}
                {selectedCells.length > 0 && (
                  <Badge variant="outline" className="bg-blue-50 text-blue-700">
                    {selectedCells.length}„Çª„É´ÈÅ∏Êäû‰∏≠
                  </Badge>
                )}
              </div>
            )}
            
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => setShowStats(!showStats)}
            >
              <Eye className="w-4 h-4" />
            </Button>
            
            <Button variant="outline" onClick={onClose}>
              <X className="w-4 h-4 mr-2" />
              Èñâ„Åò„Çã
            </Button>
          </div>
        </div>
      </div>

      <div className="flex-1 flex">
        {/* „Çµ„Ç§„Éâ„Éê„Éº */}
        <div className="w-80 bg-white border-r border-gray-200 overflow-y-auto">
          <div className="p-4 space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Êìç‰Ωú„Ç¨„Ç§„Éâ</CardTitle>
                <CardDescription>
                  „Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´Ëæ≤Âú∞„Ç®„Éá„Ç£„Çø„Éº„ÅÆ‰Ωø„ÅÑÊñπ
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="text-sm space-y-3">
                  <div>
                    <p className="font-medium mb-2">Âü∫Êú¨Êìç‰Ωú</p>
                    <div className="space-y-2">
                      <div className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                        <div>
                          <p className="font-medium">Âú∞Âõ≥ÁßªÂãï</p>
                          <p className="text-gray-600 text-xs">„Éâ„É©„ÉÉ„Ç∞„ÅßÂú∞Âõ≥„ÇíÁßªÂãï</p>
                        </div>
                      </div>
                      <div className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                        <div>
                          <p className="font-medium">Ëæ≤Âú∞ÊèèÁîª</p>
                          <p className="text-gray-600 text-xs">„ÇØ„É™„ÉÉ„ÇØ„Åß„Éù„É™„Ç¥„É≥„ÇíÊèèÁîª</p>
                        </div>
                      </div>
                      <div className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-purple-500 rounded-full mt-2"></div>
                        <div>
                          <p className="font-medium">„Çª„É´ÈÅ∏Êäû</p>
                          <p className="text-gray-600 text-xs">„É°„ÉÉ„Ç∑„É•„Çª„É´„Çí„ÇØ„É™„ÉÉ„ÇØ„ÅßÈÅ∏Êäû</p>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <p className="font-medium mb-2">„É¢„Éº„ÉâÂàá„ÇäÊõø„Åà</p>
                    <div className="space-y-1">
                      <Badge variant="outline" className="text-xs mr-1">„Éë„É≥</Badge>
                      <Badge variant="outline" className="text-xs mr-1">ÊèèÁîª</Badge>
                      <Badge variant="outline" className="text-xs">ÈÅ∏Êäû</Badge>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {currentPlot && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">‰øùÂ≠ò„Åï„Çå„ÅüËæ≤Âú∞</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="bg-green-50 p-3 rounded-lg">
                    <p className="font-medium text-sm text-green-800 mb-1">
                      {currentPlot.name}
                    </p>
                    <p className="text-xs text-green-600 mb-1">
                      Èù¢Á©ç: {(currentPlot.area / 10000).toFixed(2)} ha
                    </p>
                    <p className="text-xs text-green-600">
                      {currentPlot.description || 'ÊèèÁîª„Åó„ÅüËæ≤Âú∞„Ç®„É™„Ç¢'}
                    </p>
                  </div>
                </CardContent>
              </Card>
            )}

            {selectedCells.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">ÈÅ∏Êäû‰∏≠„ÅÆ„Çª„É´</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="bg-blue-50 p-3 rounded-lg">
                    <p className="font-medium text-sm text-blue-800 mb-1">
                      {selectedCells.length} „Çª„É´ÈÅ∏Êäû‰∏≠
                    </p>
                    <p className="text-xs text-blue-600 mb-2">
                      Èù¢Á©ç: {selectedCells.length * 25} „é° ({(selectedCells.length * 25 / 10000).toFixed(3)} ha)
                    </p>
                    <Button 
                      onClick={handleCreateVegetable}
                      className="w-full bg-green-600 hover:bg-green-700"
                      size="sm"
                    >
                      <Save className="w-4 h-4 mr-2" />
                      ÈáéËèúÁôªÈå≤„Å∏
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Ê†ΩÂüπÈáéËèúÁ¢∫Ë™ç</CardTitle>
                <CardDescription>
                  ÁôªÈå≤Ê∏à„ÅøÈáéËèú„Çí„ÇØ„É™„ÉÉ„ÇØ„ÅßÂú∞Âõ≥Ë°®Á§∫„ÉªÁ∑ëÊû†„ÅßÂå∫ÂüüÁ¢∫Ë™ç
                </CardDescription>
              </CardHeader>
              <CardContent>
                {isLoadingVegetables ? (
                  <div className="flex items-center justify-center py-4">
                    <Loader2 className="w-4 h-4 animate-spin mr-2" />
                    <span className="text-sm text-gray-600">Ë™≠„ÅøËæº„Åø‰∏≠...</span>
                  </div>
                ) : registeredVegetables.length === 0 ? (
                  <div className="text-center py-6">
                    <div className="text-gray-400 mb-2">
                      üå±
                    </div>
                    <p className="text-sm text-gray-500 mb-1">ÁôªÈå≤„Åï„Çå„ÅüÈáéËèú„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                    <p className="text-xs text-gray-400">Ëæ≤Âú∞ÊèèÁîª ‚Üí „ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ„ÅßÈáéËèú„ÇíÁôªÈå≤</p>
                  </div>
                ) : (
                  <div className="space-y-2 max-h-60 overflow-y-auto">
                    {registeredVegetables.map((vegetable, index) => (
                      <div
                        key={vegetable.id || index}
                        onClick={() => handleVegetableAreaClick(vegetable)}
                        className="p-3 bg-green-50 border border-green-200 rounded-lg cursor-pointer hover:bg-green-100 transition-colors"
                      >
                        <div className="space-y-3">
                          {/* ÈáéËèúÂü∫Êú¨ÊÉÖÂ†± */}
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <h4 className="font-medium text-green-800 text-sm">
                                {vegetable.name}
                              </h4>
                              <p className="text-xs text-green-600 mt-1">
                                ÂìÅÁ®Æ: {vegetable.variety_name}
                              </p>
                              <p className="text-xs text-gray-600">
                                Âå∫Áîª: {vegetable.plot_name}
                              </p>
                              <p className="text-xs text-gray-500">
                                Èù¢Á©ç: {vegetable.area_size?.toFixed(1) || '0'} „é°
                              </p>
                              {/* Á©∫Èñì„Éá„Éº„Çø„ÅÆÊúâÁÑ°„ÇíË°®Á§∫ */}
                              <div className="flex items-center mt-1 space-x-2">
                                {vegetable.has_spatial_data ? (
                                  <Badge variant="outline" className="text-xs bg-blue-50 border-blue-200 text-blue-700">
                                    üìç ‰ΩçÁΩÆÊÉÖÂ†±„ÅÇ„Çä
                                  </Badge>
                                ) : (
                                  <Badge variant="outline" className="text-xs bg-gray-50 border-gray-200 text-gray-500">
                                    üìç ‰ΩçÁΩÆÊÉÖÂ†±„Å™„Åó
                                  </Badge>
                                )}
                              </div>
                            </div>
                            <div className="flex flex-col space-y-1">
                              <Badge 
                                variant="outline" 
                                className="text-xs bg-white border-green-300 text-green-700"
                              >
                                {vegetable.status === 'planning' ? 'Ë®àÁîª‰∏≠' : 
                                 vegetable.status === 'growing' ? 'Ê†ΩÂüπ‰∏≠' : 
                                 vegetable.status === 'harvesting' ? 'ÂèéÁ©´‰∏≠' : 'ÂÆå‰∫Ü'}
                              </Badge>
                            </div>
                          </div>

                          {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
                          <div className="flex space-x-2">
                            <Button
                              size="sm"
                              variant="outline"
                              className="flex-1 text-xs py-1 h-7"
                              onClick={(e) => {
                                e.stopPropagation() // Ë¶™„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇíÊ≠¢„ÇÅ„Çã
                                handleVegetableAreaClick(vegetable)
                              }}
                              disabled={!vegetable.has_spatial_data}
                            >
                              üìç ‰ΩçÁΩÆÁßªÂãï
                            </Button>
                            <Button
                              size="sm"
                              variant="outline" 
                              className="flex-1 text-xs py-1 h-7"
                              onClick={(e) => {
                                e.stopPropagation()
                                handleVegetableDetailClick(vegetable)
                              }}
                            >
                              üìã Ë©≥Á¥∞Á¢∫Ë™ç
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
                
                <div className="mt-4 p-2 bg-blue-50 rounded text-xs text-blue-700">
                  üí° ÈáéËèú„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Ë©≤ÂΩì„Ç®„É™„Ç¢„Å´ÁßªÂãï„ÉªÁ∑®ÈõÜ
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* „É°„Ç§„É≥Âú∞Âõ≥„Ç®„É™„Ç¢ */}
        <div className="flex-1 relative">
          <ProfessionalFarmEditor
            ref={mapEditorRef}
            onCellsSelected={handleCellsSelected}
            onAreaSaved={handleAreaSaved}
            initialCenter={[139.6917, 35.6895]}
            initialZoom={16}
            height="100%"
          />

          {/* „Éï„É≠„Éº„ÉÜ„Ç£„É≥„Ç∞„Ç¢„ÇØ„Ç∑„Éß„É≥ */}
          <div className="absolute bottom-6 right-6 z-10 space-y-2">
            <Button
              size="sm"
              className="shadow-lg"
              onClick={() => {/* „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂá¶ÁêÜ */}}
            >
              <Download className="w-4 h-4 mr-2" />
              „Éá„Éº„ÇøÂá∫Âäõ
            </Button>
          </div>
        </div>
      </div>

      {/* „Éï„ÉÉ„Çø„ÉºÔºàÂá∫ÂÖ∏Ë°®Á§∫„Å™„Å©Ôºâ */}
      <div className="bg-white border-t border-gray-200 px-6 py-2">
        <div className="flex items-center justify-between text-xs text-gray-500">
          <div>
            Âú∞Âõ≥„Éá„Éº„Çø: ¬© <a href="https://www.gsi.go.jp/" target="_blank" rel="noopener noreferrer" className="underline">ÂõΩÂúüÂú∞ÁêÜÈô¢</a>
          </div>
          <div className="flex items-center space-x-4">
            {currentPlot && (
              <span>Ëæ≤Âú∞Èù¢Á©ç: {(currentPlot.area / 10000).toFixed(2)} ha</span>
            )}
            {selectedCells.length > 0 && (
              <span>ÈÅ∏Êäû: {selectedCells.length} „Çª„É´</span>
            )}
          </div>
        </div>
      </div>

      {/* ÈáéËèúË©≥Á¥∞Á¢∫Ë™ç„É¢„Éº„ÉÄ„É´ */}
      <Dialog open={showDetailModal} onOpenChange={setShowDetailModal} modal={true}>
        <DialogContent className="w-full max-h-[90vh] overflow-y-auto bg-white mx-4 sm:max-w-[900px] sm:mx-auto md:max-w-[950px]"
          style={{ zIndex: 9999 }}
        >
          <DialogHeader className="border-b border-gray-200 pb-4 mb-6">
            <DialogTitle className="text-2xl font-bold flex items-center text-gray-900">
              üå± {selectedVegetable?.name || 'ÈáéËèúË©≥Á¥∞'}
              <Badge className="ml-4 text-sm px-3 py-1">
                {selectedVegetable?.status === 'planning' ? 'Ë®àÁîª‰∏≠' : 
                 selectedVegetable?.status === 'growing' ? 'Ê†ΩÂüπ‰∏≠' : 
                 selectedVegetable?.status === 'harvesting' ? 'ÂèéÁ©´‰∏≠' : 'ÂÆå‰∫Ü'}
              </Badge>
            </DialogTitle>
            <p className="text-gray-600 mt-2">
              ÂìÅÁ®Æ: {selectedVegetable?.variety_name} | Âå∫Áîª: {selectedVegetable?.plot_name}
            </p>
          </DialogHeader>

          {selectedVegetable && (
            <div className="space-y-6">
              {/* Âü∫Êú¨ÊÉÖÂ†±„Ç´„Éº„ÉâÁæ§ */}
              <div className="grid md:grid-cols-3 gap-6">
                <Card className="border-l-4 border-l-green-500 shadow-sm hover:shadow-md transition-shadow">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-base font-medium text-gray-700 flex items-center">
                      <MapPin className="w-5 h-5 mr-2 text-green-500" />
                      ÂúÉÂ†¥„ÉªÈù¢Á©ç
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="font-semibold text-lg text-gray-900">{selectedVegetable.plot_name}</p>
                    <p className="text-3xl font-bold mt-2 text-green-600">
                      {selectedVegetable.area_size?.toFixed(1) || '0'} „é°
                    </p>
                    <p className="text-sm text-gray-500 mt-2">
                      ({(selectedVegetable.area_size / 10000)?.toFixed(3) || '0'} ha)
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-l-4 border-l-blue-500 shadow-sm hover:shadow-md transition-shadow">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-base font-medium text-gray-700 flex items-center">
                      <Sprout className="w-5 h-5 mr-2 text-blue-500" />
                      ÂìÅÁ®ÆÊÉÖÂ†±
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="font-semibold text-lg text-gray-900">{selectedVegetable.variety_name}</p>
                    <p className="text-sm text-gray-600 mt-2">ÈáéËèú: {selectedVegetable.name}</p>
                    <div className="mt-3">
                      {selectedVegetable.has_spatial_data ? (
                        <Badge variant="outline" className="text-sm bg-blue-50 border-blue-300 text-blue-700 px-3 py-1">
                          üìç ‰ΩçÁΩÆÊÉÖÂ†±„ÅÇ„Çä
                        </Badge>
                      ) : (
                        <Badge variant="outline" className="text-sm bg-gray-50 border-gray-300 text-gray-500 px-3 py-1">
                          üìç ‰ΩçÁΩÆÊÉÖÂ†±„Å™„Åó
                        </Badge>
                      )}
                    </div>
                  </CardContent>
                </Card>

                <Card className="border-l-4 border-l-purple-500 shadow-sm hover:shadow-md transition-shadow">
                  <CardHeader className="pb-3">
                    <CardTitle className="text-base font-medium text-gray-700 flex items-center">
                      <Calendar className="w-5 h-5 mr-2 text-purple-500" />
                      Ê†ΩÂüπÊó•Á®ã
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div>
                        <p className="text-sm text-gray-600 font-medium">Ê§ç‰ªòÊó•</p>
                        <p className="font-semibold text-gray-900">{formatDate(selectedVegetable.planting_date)}</p>
                      </div>
                      {selectedVegetable.expected_harvest_start && (
                        <div>
                          <p className="text-sm text-gray-600 font-medium">ÂèéÁ©´‰∫àÂÆö</p>
                          <p className="text-sm text-gray-900">{formatDate(selectedVegetable.expected_harvest_start)}</p>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* „Çø„Éñ„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
              <Tabs defaultValue="overview" className="space-y-6">
                <TabsList className="grid w-full grid-cols-3 h-12 p-1 bg-gray-100 rounded-lg">
                  <TabsTrigger value="overview" className="text-sm font-medium">Ê¶ÇË¶Å</TabsTrigger>
                  <TabsTrigger value="progress-records" className="text-sm font-medium">ÈÄ≤Êçó/Ë®òÈå≤</TabsTrigger>
                  <TabsTrigger value="analysis" className="text-sm font-medium">ÂàÜÊûê</TabsTrigger>
                </TabsList>

                <TabsContent value="overview" className="space-y-6">
                  <Card className="shadow-sm">
                    <CardHeader className="bg-gradient-to-r from-green-50 to-blue-50 rounded-t-lg">
                      <CardTitle className="text-lg">Ê†ΩÂüπÊ¶ÇË¶Å</CardTitle>
                      <CardDescription className="text-base">Âü∫Êú¨ÁöÑ„Å™Ê†ΩÂüπÊÉÖÂ†±„Å®ÁèæÂú®„ÅÆÁä∂Ê≥Å</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-6 p-6">
                      <div className="grid md:grid-cols-2 gap-4">
                        <div className="space-y-3">
                          <div className="flex items-center space-x-3">
                            <h4 className="font-semibold text-sm">Âü∫Êú¨„Éá„Éº„Çø</h4>
                            {isEditing && (
                              <div className="flex items-center space-x-2 bg-purple-50 px-2 py-1 rounded">
                                <Palette className="w-3 h-3 text-purple-600" />
                                <Label className="text-xs text-purple-700 font-medium">Ëâ≤:</Label>
                                <input
                                  type="color"
                                  value={selectedColor}
                                  onChange={(e) => setSelectedColor(e.target.value)}
                                  className="w-6 h-6 border border-purple-300 rounded cursor-pointer"
                                  title="„Éù„É™„Ç¥„É≥„ÅÆËâ≤„ÇíÈÅ∏Êäû"
                                />
                              </div>
                            )}
                          </div>
                          <div className="space-y-3 text-sm">
                            {!isEditing ? (
                              <>
                                <div className="flex justify-between">
                                  <span className="text-gray-600">ÈáéËèúÂêç:</span>
                                  <span className="font-medium">{selectedVegetable.name}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-gray-600">ÂìÅÁ®Æ:</span>
                                  <span className="font-medium">{selectedVegetable.variety_name}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-gray-600">Âå∫Áîª:</span>
                                  <span className="font-medium">{selectedVegetable.plot_name}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-gray-600">Èù¢Á©ç:</span>
                                  <span className="font-medium">{selectedVegetable.area_size?.toFixed(1)} „é°</span>
                                </div>
                              </>
                            ) : (
                              <div className="space-y-3 bg-blue-50 p-4 rounded-lg border border-blue-200">
                                <div className="space-y-1">
                                  <Label className="text-xs text-blue-700 font-medium">ÈáéËèúÂêç *</Label>
                                  <Input
                                    value={editForm.name || ''}
                                    onChange={(e) => handleFormChange('name', e.target.value)}
                                    className="h-8 bg-white border-blue-300 focus:border-blue-500"
                                    placeholder="ÈáéËèúÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                  />
                                </div>
                                <div className="space-y-1">
                                  <Label className="text-xs text-blue-700 font-medium">ÂìÅÁ®Æ *</Label>
                                  <Input
                                    value={editForm.variety_name || ''}
                                    onChange={(e) => handleFormChange('variety_name', e.target.value)}
                                    className="h-8 bg-white border-blue-300 focus:border-blue-500"
                                    placeholder="ÂìÅÁ®ÆÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                  />
                                </div>
                                <div className="space-y-1">
                                  <Label className="text-xs text-blue-700 font-medium">Âå∫Áîª *</Label>
                                  <Input
                                    value={editForm.plot_name || ''}
                                    onChange={(e) => handleFormChange('plot_name', e.target.value)}
                                    className="h-8 bg-white border-blue-300 focus:border-blue-500"
                                    placeholder="Âå∫ÁîªÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                  />
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                        
                        <div className="space-y-3">
                          <h4 className="font-semibold text-sm">Ê†ΩÂüπÊó•Á®ã</h4>
                          <div className="space-y-3 text-sm">
                            {!isEditing ? (
                              <>
                                <div className="flex justify-between">
                                  <span className="text-gray-600">Ê§ç‰ªòÊó•:</span>
                                  <span className="font-medium">{formatDate(selectedVegetable.planting_date)}</span>
                                </div>
                                {selectedVegetable.expected_harvest_start && (
                                  <div className="flex justify-between">
                                    <span className="text-gray-600">ÂèéÁ©´ÈñãÂßã‰∫àÂÆö:</span>
                                    <span className="font-medium">{formatDate(selectedVegetable.expected_harvest_start)}</span>
                                  </div>
                                )}
                                {selectedVegetable.expected_harvest_end && (
                                  <div className="flex justify-between">
                                    <span className="text-gray-600">ÂèéÁ©´ÁµÇ‰∫Ü‰∫àÂÆö:</span>
                                    <span className="font-medium">{formatDate(selectedVegetable.expected_harvest_end)}</span>
                                  </div>
                                )}
                                <div className="flex justify-between">
                                  <span className="text-gray-600">Áä∂ÊÖã:</span>
                                  <Badge variant="outline">
                                    {selectedVegetable.status === 'planning' ? 'Ë®àÁîª‰∏≠' : 
                                     selectedVegetable.status === 'growing' ? 'Ê†ΩÂüπ‰∏≠' : 
                                     selectedVegetable.status === 'harvesting' ? 'ÂèéÁ©´‰∏≠' : 'ÂÆå‰∫Ü'}
                                  </Badge>
                                </div>
                              </>
                            ) : (
                              <div className="space-y-3 bg-green-50 p-4 rounded-lg border border-green-200">
                                <div className="space-y-1">
                                  <Label className="text-xs text-green-700 font-medium">Ê§ç‰ªòÊó• *</Label>
                                  <Input
                                    type="date"
                                    value={editForm.planting_date || ''}
                                    onChange={(e) => handleFormChange('planting_date', e.target.value)}
                                    className="h-8 bg-white border-green-300 focus:border-green-500"
                                  />
                                </div>
                                <div className="space-y-1">
                                  <Label className="text-xs text-green-700 font-medium">ÂèéÁ©´ÈñãÂßã‰∫àÂÆö</Label>
                                  <Input
                                    type="date"
                                    value={editForm.expected_harvest_start || ''}
                                    onChange={(e) => handleFormChange('expected_harvest_start', e.target.value)}
                                    className="h-8 bg-white border-green-300 focus:border-green-500"
                                  />
                                </div>
                                <div className="space-y-1">
                                  <Label className="text-xs text-green-700 font-medium">ÂèéÁ©´ÁµÇ‰∫Ü‰∫àÂÆö</Label>
                                  <Input
                                    type="date"
                                    value={editForm.expected_harvest_end || ''}
                                    onChange={(e) => handleFormChange('expected_harvest_end', e.target.value)}
                                    className="h-8 bg-white border-green-300 focus:border-green-500"
                                  />
                                </div>
                                <div className="space-y-1">
                                  <Label className="text-xs text-green-700 font-medium">Áä∂ÊÖã</Label>
                                  <Select value={editForm.status} onValueChange={(value) => handleFormChange('status', value)}>
                                    <SelectTrigger className="h-8 bg-white border-green-300">
                                      <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                      <SelectItem value="planning">Ë®àÁîª‰∏≠</SelectItem>
                                      <SelectItem value="growing">Ê†ΩÂüπ‰∏≠</SelectItem>
                                      <SelectItem value="harvesting">ÂèéÁ©´‰∏≠</SelectItem>
                                      <SelectItem value="completed">ÂÆå‰∫Ü</SelectItem>
                                    </SelectContent>
                                  </Select>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>

                      {/* ÂÇôËÄÉ„Çª„ÇØ„Ç∑„Éß„É≥ */}
                      <div className="mt-6">
                        <h4 className="font-semibold text-sm mb-3">ÂÇôËÄÉ</h4>
                        {!isEditing ? (
                          selectedVegetable.notes ? (
                            <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded border">
                              {selectedVegetable.notes}
                            </p>
                          ) : (
                            <p className="text-xs text-gray-400 italic">ÂÇôËÄÉ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                          )
                        ) : (
                          <div className="space-y-1">
                            <Textarea
                              value={editForm.notes || ''}
                              onChange={(e) => handleFormChange('notes', e.target.value)}
                              placeholder="ÂÇôËÄÉ„ÄÅ„É°„É¢„ÄÅÊ≥®ÊÑè‰∫ãÈ†Ö„Å™„Å©„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                              className="min-h-20 bg-white border-gray-300 focus:border-blue-500 resize-none"
                              rows={3}
                            />
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>

                <TabsContent value="progress-records" className="space-y-4 mt-4">
                  <div className="text-center py-12 bg-gradient-to-br from-blue-50 to-green-50 rounded-lg border border-blue-100">
                    <div className="bg-white w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 shadow-sm">
                      <Activity className="w-8 h-8 text-blue-600" />
                    </div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">‰ΩúÊ•≠Ë®òÈå≤„Éª„Çø„Çπ„ÇØÁÆ°ÁêÜ</h3>
                    <p className="text-gray-600 mb-6 max-w-md mx-auto">
                      {selectedVegetable?.name}„ÅÆË©≥Á¥∞„Å™‰ΩúÊ•≠Â±•Ê≠¥„ÄÅ„Çπ„Ç±„Ç∏„É•„Éº„É´ÁÆ°ÁêÜ„ÄÅÈÄ≤ÊçóÁ¢∫Ë™ç„ÅØ„Ç¨„É≥„ÉÅ„É£„Éº„Éà„Éö„Éº„Ç∏„ÅßË°å„Åà„Åæ„Åô„ÄÇ
                    </p>
                    <Button 
                      onClick={() => {
                        setShowDetailModal(false)
                        router.push('/dashboard/gantt')
                      }}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2.5"
                    >
                      <ExternalLink className="w-4 h-4 mr-2" />
                      „Ç¨„É≥„ÉÅ„É£„Éº„Éà„Éö„Éº„Ç∏„ÇíÈñã„Åè
                    </Button>
                    <div className="mt-4 text-xs text-gray-500">
                      ‰ΩúÊ•≠ÈÄ≤Êçó„ÅÆÂèØË¶ñÂåñ„Éª„Çø„Çπ„ÇØ„Çπ„Ç±„Ç∏„É•„Éº„É™„É≥„Ç∞„Éª„ÉÅ„Éº„É†ÂçîÂÉç
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="analysis" className="space-y-4 mt-4">
                  <div className="text-center py-12 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg border border-purple-100">
                    <div className="bg-white w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 shadow-sm">
                      <BarChart3 className="w-8 h-8 text-purple-600" />
                    </div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">„Éá„Éº„ÇøÂàÜÊûê„Éª„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ</h3>
                    <p className="text-gray-600 mb-6 max-w-md mx-auto">
                      {selectedVegetable?.name}„ÅÆÂèéÁ©´Èáè„ÄÅ„Ç≥„Çπ„ÉàÂàÜÊûê„ÄÅROI„ÄÅÂ≠£ÁØÄÂà•„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Å™„Å©„ÅÆË©≥Á¥∞ÂàÜÊûê„Éá„Éº„Çø„Çí„ÅîË¶ß„ÅÑ„Åü„Å†„Åë„Åæ„Åô„ÄÇ
                    </p>
                    <Button 
                      onClick={() => {
                        setShowDetailModal(false)
                        router.push('/dashboard/analytics')
                      }}
                      className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2.5"
                    >
                      <Target className="w-4 h-4 mr-2" />
                      „Éá„Éº„ÇøÂàÜÊûê„Éö„Éº„Ç∏„ÇíÈñã„Åè
                    </Button>
                    <div className="mt-4 text-xs text-gray-500">
                      ÂèéÁõäÊÄßÂàÜÊûê„ÉªÂäπÁéáÊÄßË©ï‰æ°„ÉªÂìÅË≥™„Éà„É¨„É≥„Éâ„Éª„Ç≥„Çπ„ÉàÊúÄÈÅ©Âåñ
                    </div>
                  </div>
                </TabsContent>
              </Tabs>

              {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
              <div className="flex justify-between pt-4">
                <Button
                  variant="outline"
                  onClick={() => {
                    if (selectedVegetable.has_spatial_data) {
                      handleVegetableAreaClick(selectedVegetable)
                    }
                  }}
                  disabled={!selectedVegetable.has_spatial_data}
                  className="flex items-center"
                >
                  <MapPin className="w-4 h-4 mr-2" />
                  Âú∞Âõ≥„Åß‰ΩçÁΩÆÁ¢∫Ë™ç
                </Button>
                
                <div className="flex space-x-2">
                  {!isEditing ? (
                    <Button 
                      variant="outline"
                      onClick={() => handleStartEdit(selectedVegetable)}
                      className="bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100"
                    >
                      <Edit className="w-4 h-4 mr-2" />
                      Á∑®ÈõÜ
                    </Button>
                  ) : (
                    <>
                      <Button 
                        onClick={handleSaveChanges}
                        disabled={isSaving}
                        className="bg-green-600 hover:bg-green-700 text-white"
                      >
                        {isSaving ? (
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        ) : (
                          <Check className="w-4 h-4 mr-2" />
                        )}
                        ‰øùÂ≠ò
                      </Button>
                      <Button 
                        variant="outline"
                        onClick={handleCancelEdit}
                        disabled={isSaving}
                      >
                        <XIcon className="w-4 h-4 mr-2" />
                        „Ç≠„É£„É≥„Çª„É´
                      </Button>
                    </>
                  )}
                  <Button onClick={handleCloseDetailModal} variant="outline">
                    Èñâ„Åò„Çã
                  </Button>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}